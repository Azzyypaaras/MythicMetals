package nourl.mythicmetals.ores;

import net.minecraft.world.gen.decorator.Decorator;
import net.minecraft.world.gen.decorator.DepthAverageDecoratorConfig;
import net.minecraft.world.gen.decorator.RangeDecoratorConfig;
import net.minecraft.world.gen.feature.ConfiguredFeature;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.OreFeatureConfig;

import nourl.mythicmetals.config.MythicConfig;

public class OreGenerator{
	public static ConfiguredFeature<?, ?> ORE_ADAMANTITE = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.ADAMANTITE_ORE.getDefaultState(),
		    MythicConfig.adamantiteVeinSize)) //Vein Size
			.decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0, // Bottom Offset
			MythicConfig.adamantiteMinHeight, // MIN y level
			MythicConfig.adamantiteMaxHeight))) // MAX y level
			.spreadHorizontally().repeat(MythicConfig.adamantitePerChunk); // number of veins per chunk
	public static ConfiguredFeature<?, ?> ORE_AETHERIUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.AETHERIUM_ORE.getDefaultState(), MythicConfig.aetheriumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.aetheriumMinHeight,MythicConfig.aetheriumMaxHeight))).spreadHorizontally().repeat(MythicConfig.aetheriumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_AQUARIUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.AQUARIUM_ORE.getDefaultState(), MythicConfig.aquariumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.aquariumMinHeight,MythicConfig.aquariumMaxHeight))).spreadHorizontally().repeat(MythicConfig.aquariumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_BANGLUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.BANGLUM_ORE.getDefaultState(), MythicConfig.banglumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.banglumMinHeight,MythicConfig.banglumMaxHeight))).spreadHorizontally().repeat(MythicConfig.banglumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_CARMOT = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.CARMOT_ORE.getDefaultState(), MythicConfig.carmotVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.carmotMinHeight,MythicConfig.carmotMaxHeight))).spreadHorizontally().repeat(MythicConfig.carmotPerChunk);
	public static ConfiguredFeature<?, ?> ORE_COPPER = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.COPPER_ORE.getDefaultState(), MythicConfig.copperVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.copperMinHeight,MythicConfig.copperMaxHeight))).spreadHorizontally().repeat(MythicConfig.copperPerChunk);
	public static ConfiguredFeature<?, ?> ORE_KYBER = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.KYBER_ORE.getDefaultState(), MythicConfig.kyberVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.kyberMinHeight,MythicConfig.kyberMaxHeight))).spreadHorizontally().repeat(MythicConfig.kyberPerChunk);
	public static ConfiguredFeature<?, ?> ORE_LUTETIUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.LUTETIUM_ORE.getDefaultState(), MythicConfig.lutetiumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.lutetiumMinHeight,MythicConfig.lutetiumMaxHeight))).spreadHorizontally().repeat(MythicConfig.lutetiumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_MANGANESE = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.MANGANESE_ORE.getDefaultState(), MythicConfig.manganeseVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.manganeseMinHeight,MythicConfig.manganeseMaxHeight))).spreadHorizontally().repeat(MythicConfig.manganesePerChunk);
	public static ConfiguredFeature<?, ?> ORE_MIDAS_GOLD = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, MythicMetalsOres.MIDAS_GOLD_ORE.getDefaultState(), MythicConfig.midasgoldVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.midasgoldMinHeight,MythicConfig.midasgoldMaxHeight))).spreadHorizontally().repeat(MythicConfig.midasgoldPerChunk);
	public static ConfiguredFeature<?, ?> ORE_MYTHRIL = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.MYTHRIL_ORE.getDefaultState(), MythicConfig.mythrilVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.mythrilMinHeight,MythicConfig.mythrilMaxHeight))).spreadHorizontally().repeat(MythicConfig.mythrilPerChunk);
	public static ConfiguredFeature<?, ?> ORE_ORICHALCUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.ORICHALCUM_ORE.getDefaultState(), MythicConfig.orichalcumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.orichalcumMinHeight,MythicConfig.orichalcumMaxHeight))).spreadHorizontally().repeat(MythicConfig.orichalcumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_OSMIUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.OSMIUM_ORE.getDefaultState(), MythicConfig.osmiumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.osmiumMinHeight,MythicConfig.osmiumMaxHeight))).spreadHorizontally().repeat(MythicConfig.osmiumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_PLATINUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.PLATINUM_ORE.getDefaultState(), MythicConfig.platinumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.platinumMinHeight,MythicConfig.platinumMaxHeight))).spreadHorizontally().repeat(MythicConfig.platinumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_PROMETHEUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.PROMETHEUM_ORE.getDefaultState(), MythicConfig.prometheumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.prometheumMinHeight,MythicConfig.prometheumMaxHeight))).spreadHorizontally().repeat(MythicConfig.prometheumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_QUADRILLUM = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.QUADRILLUM_ORE.getDefaultState(), MythicConfig.quadrillumVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.quadrillumMinHeight,MythicConfig.quadrillumMaxHeight))).spreadHorizontally().repeat(MythicConfig.quadrillumPerChunk);
	public static ConfiguredFeature<?, ?> ORE_RUNITE = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.RUNITE_ORE.getDefaultState(), MythicConfig.runiteVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.runiteMinHeight,MythicConfig.runiteMaxHeight))).spreadHorizontally().repeat(MythicConfig.runitePerChunk);
	public static ConfiguredFeature<?, ?> ORE_SILVER = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.SILVER_ORE.getDefaultState(), MythicConfig.silverVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.silverMinHeight,MythicConfig.silverMaxHeight))).spreadHorizontally().repeat(MythicConfig.silverPerChunk);
	public static ConfiguredFeature<?, ?> ORE_STARRITE = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.STARRITE_ORE.getDefaultState(), MythicConfig.starriteVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.starriteMinHeight,MythicConfig.starriteMaxHeight))).spreadHorizontally().repeat(MythicConfig.starritePerChunk);
	public static ConfiguredFeature<?, ?> ORE_STORMYX = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, MythicMetalsOres.STORMYX_ORE.getDefaultState(), MythicConfig.stormyxVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.stormyxMinHeight,MythicConfig.stormyxMaxHeight))).spreadHorizontally().repeat(MythicConfig.stormyxPerChunk);
	public static ConfiguredFeature<?, ?> ORE_TANTALITE = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.TANTALITE_ORE.getDefaultState(), MythicConfig.tantaliteVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.tantaliteMinHeight,MythicConfig.tantaliteMaxHeight))).spreadHorizontally().repeat(MythicConfig.tantalitePerChunk);
	public static ConfiguredFeature<?, ?> ORE_TIN = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.TIN_ORE.getDefaultState(), MythicConfig.tinVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.tinMinHeight,MythicConfig.tinMaxHeight))).spreadHorizontally().repeat(MythicConfig.tinPerChunk);
	public static ConfiguredFeature<?, ?> ORE_TRUESILVER = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, MythicMetalsOres.TRUESILVER_ORE.getDefaultState(), MythicConfig.truesilverVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.truesilverMinHeight,MythicConfig.truesilverMaxHeight))).spreadHorizontally().repeat(MythicConfig.truesilverPerChunk);
	public static ConfiguredFeature<?, ?> ORE_UNOBTAINIUM = Feature.NO_SURFACE_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.UNOBTAINIUM_ORE.getDefaultState(), MythicConfig.unobtainiumVeinSize)).decorate(Decorator.DEPTH_AVERAGE.configure(new DepthAverageDecoratorConfig(MythicConfig.unobtainiumAverageHeight, MythicConfig.unobtainiumSpread)).spreadHorizontally());
	public static ConfiguredFeature<?, ?> ORE_UR = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, MythicMetalsOres.UR_ORE.getDefaultState(), MythicConfig.urVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.urMinHeight,MythicConfig.urMaxHeight))).spreadHorizontally().repeat(MythicConfig.urPerChunk);
	public static ConfiguredFeature<?, ?> ORE_VERMICULITE = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.VERMICULITE_ORE.getDefaultState(), MythicConfig.vermiculiteVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.vermiculiteMinHeight,MythicConfig.vermiculiteMaxHeight))).spreadHorizontally().repeat(MythicConfig.vermiculitePerChunk);
	public static ConfiguredFeature<?, ?> ORE_ZINC = Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, MythicMetalsOres.ZINC_ORE.getDefaultState(), MythicConfig.zincVeinSize)).decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,MythicConfig.zincMinHeight,MythicConfig.zincMaxHeight))).spreadHorizontally().repeat(MythicConfig.zincPerChunk);
	


}